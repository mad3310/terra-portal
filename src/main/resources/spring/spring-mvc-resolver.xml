<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <description>系统SpringMVC resolver全局配置</description>

    <!--配置视图-->
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="mediaTypes">
            <map>
                <entry key="json" value="application/json"/>
                <entry key="xml" value="application/xml"/>
                <entry key="rss" value="application/rss+xml"/>
                <entry key="pdf" value="application/pdf"/>
                <entry key="xls" value="application/vnd.ms-excel"/>
                <entry key="protobuf" value="application/x-protobuf"/>
            </map>
        </property>
        <!-- 1、开启默认匹配,如果所有的mediaType都没匹配上，就会使用下面bean配置的jsp国际化resolver -->
        <!--注意：如果是API系统，请将该打开，打开后默认就为JSON，如果是带界面系统，务必注释掉该，注释掉后，<property name="viewResolvers">将生效。     !!!与上面二选一-->
        <!--<property name="defaultContentType" value="application/json"/>-->
        <!-- 2、是否忽略掉accept header，默认是false -->
        <property name="ignoreAcceptHeader" value="true"/>
        <!-- 3、是否启用扩展名支持，默认是true-->
        <property name="favorPathExtension" value="false"/>
        <!-- 4、是否启用参数支持，默认是true http://localhost:8180/SpringMVC/fruit/1?format=pdf-->
        <property name="favorParameter" value="true"/>
        <!-- 自定义启动参数参数名，如上链接地址，默认为format，手动改为Format，现在链接地址为:http://localhost:8180/SpringMVC/fruit/1?Format=pdf -->
        <!--         <property name="parameterName" value="Format" /> -->
        <property name="defaultViews">
            <list>
                <!-- JSON View -->
                <bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" />
                <!-- RSS View -->
                <bean class="com.le.matrix.redis.rest.view.RssFeedView"/>
                <!-- PDF View -->
                <bean class="com.le.matrix.redis.rest.view.PdfView"/>
                <!-- XLS View -->
                <bean class="com.le.matrix.redis.rest.view.XlsView"/>
                <!-- protobuf View -->
                <bean class="com.le.matrix.redis.rest.view.ProtobufView"/>
                <!-- JAXB XML View -->
                <bean class="org.springframework.web.servlet.view.xml.MarshallingView">
                    <constructor-arg>
                        <bean class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
                            <property name="classesToBeBound">
                                <list>
                                    <value>com.le.matrix.redis.model.Demo</value>
                                    <!--所有映射对象-->
                                </list>
                            </property>
                        </bean>
                    </constructor-arg>
                </bean>
            </list>
        </property>
        <!-- 默认显示 -->
        <!--注意：如果是API系统，请将该注释，并将<property name="defaultContentType" value="application/json"/>打开注释，让默认为JSON，如果是带界面系统，请取消该部分注释，注释
        <property name="defaultContentType" value="application/json"/>，这样默认为JSP     !!!与上面二选一-->
        <property name="viewResolvers">
            <list>
                <!--再该处定义，和直接将该bean放到根路径下定义性质一样。唯一区别是，再外部定义可以指定bean的order，让先执行该。-->
                <bean id="jspViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
                    <property name="prefix" value="/WEB-INF/views/"/>
                    <property name="suffix" value=".jsp"></property>
                </bean>
                <bean class="org.springframework.web.servlet.view.BeanNameViewResolver"/>
            </list>
        </property>
        <!--
            	执行顺序:
                1. spring检查setFavorPathExtension(boolean) ，如果这个属性为true（默认为true），检查请求的后缀名，来返回一种 mediaType ，
                   而后缀名和mediaType是通过ContentNegotiatingViewResolver  配置中的mediaTypes指定的。
                2.spring检查 setFavorParameter(boolean) 这个属性是否为true（默认为false），而如果你打开这个属性，那么默认的参数名应为 format ，
                spring通过你传过去的参数决定返回哪种mediaType。
                3.如果前两步没有找到合适的mediaType，则使用defaultViews设置的默认值显示。
                4.如果前三步都没有找到合适的mediaType，并且 ignoreAcceptHeader 这个属性为false（默认为false），spring则根据请求头里面设置的ContentType
                来找适合的mediaType。
                5.最终都没找到，选择使用viewResolvers
         -->
    </bean>
    <!-- 添加注解驱动，把请求都分发到控制器,相当于注册DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter，并添加默认的converter
    如果需要特殊处理json，可去掉该配置，分别添加DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter配置，
    详细看webportal-app-http-api的dispatcher-servlet.xml文件-->
    <!--<mvc:annotation-driven/>-->
    <!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射   请求映射-->
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <!-- 2.配置json过滤转换器：过滤转换 -->
                <bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
                </bean>
            </list>
        </property>
        <!--配置数据校验  该配置对ContentNegotiatingViewResolver仍然有效-->
        <property name="webBindingInitializer" ref="webBindingInitializer"/>
    </bean>

    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"/>

    <!--上面ContentNegotiatingViewResolver与AnnotationMethodHandlerAdapter+DefaultAnnotationHandlerMapping区别及用法：
		    用法：
		        /**
		         * 使用AnnotationMethodHandlerAdapter
		         * @param userId
		         * @return
		         */
		        @RequestMapping(value = "/{userId}", method= RequestMethod.GET)
		        public @ResponseBody User getUser(@PathVariable Integer userId){
		            User user = userFacade.selectByPrimaryKey(userId);
		            return user;
		        }
		
		        /**
		         * 使用ContentNegotiatingViewResolver返回多种数据类型
		         * @param userId
		         * @param model
		         * @return
		         */
		        @RequestMapping(value = "/api/{userId}", method= RequestMethod.GET)
		        public String getUser(@PathVariable Integer userId,ModelMap model){
		            User user = userFacade.selectByPrimaryKey(userId);
		            model.addAttribute("model", user);
		            return "list";
		        }
		     区别：
		     1.如果在代码中使用@ResponseBody直接返回，则AnnotationMethodHandlerAdapter注解起作用，
		     2.如果在代码中使用ModelView返回结果集，则ContentNegotiatingViewResolver生效。
		     3.ContentNegotiating 是将controller的返回结果委托给ViewResolver，这里你可以使用spring内置的各种ViewResolver或者定制自己的。
		     4.而@ResponseBody注解则会绕过ViewResolver，将controller的返回结果交给HttpMessageConverter，然后将转换后的消息返回，也即是返回的是纯数据。使
		        用AnnotationMethodHandlerAdapter完成整个过程。AnnotationMethodHandlerAdapter会自动加载JSON、XML转换器，并且使用@ResponseBody返回数据，根据你Ajax
		        请求数据类型，如果你请求JSON，则返回JSON，默认直接返回json串，如果你Ajax请求XML，并且在返回的对象里，如上面User类中定义了@XmlRootElement等语法，则
		        会返回xml，否则返回json格式的数据。
		     5.AnnotationMethodHandlerAdapter+DefaultAnnotationHandlerMapping的组合可以使用<mvc:annotation-driven/>代替。
		     6.如果你需要重新convert返回的JSON或XML数据，而不使用自带的MappingJacksonHttpMessageConverter转换JSON，或XmlAwareFormHttpMessageConverter转换XML，你可以在
		        如上AnnotationMethodHandlerAdapter bean内定义自己的messageConverters。
		     7.使用ContentNegotiating可以提供多种数据返回，同理，要返回XML，也必须加@XmlRootElement等语法。对于每种类型，你可以自定义view，SpringMVC会提供常用的view的默认
		        抽象类。对于XML，你要使用MarshallingView，必须加@XmlRootElement等语法，你可以自定义自己的注解，不用MarshallingView。
		     8.总结一下，AnnotationMethodHandlerAdapter注解只会处理内置的ByteArrayHttpMessageConvertor，StringHttpMessageConvertor,ResourceHttpMessageConvertor，SourceHttpMessageConvertor，
		     XmlAwareFormHttpMessageConverter，MappingJacksonHttpMessageConverter，Jaxb2RootElementHttpMessageConvertor，不能处理自定义格式异常。使用ContentNegotiating可以
		     9.DefaultAnnotationHandlerMapping  通过注解，把一个URL映射到Controller类上，允许内部可以定义拦截器，SpringMVC为了简化定义拦截器，提供了<mvc:interceptors> 标签直
		     接定义所有拦截器。AnnotationMethodHandlerAdapter    通过注解，把一个URL映射到Controller类的方法上
    -->

    <!--jsp处理-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
    <!--freemarker-->
    <bean id="viewResolver"
          class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="suffix" value=".ftl"/>
        <property name="contentType" value="text/xml;charset=UTF-8"></property>
        <property name="viewNames" value="*.xml"/>
    </bean>
</beans>